// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CalendarProvider {
  GOOGLE
  OUTLOOK
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  password  String
  name      String?
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  bookings  Booking[]  // User can have many bookings
  calendars Calendar[] // User can have many calendars

  @@map("users")
}

model Service {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  price       Float
  duration    Int       // Duration in minutes
  available   Boolean   @default(true)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  bookings    Booking[] // Service can be booked many times

  @@map("services")
}

model Booking {
  id        Int       @id @default(autoincrement())
  startTime DateTime  @map("start_time")
  endTime   DateTime  @map("end_time")
  status    String    @default("pending") // pending, confirmed, cancelled, completed
  notes     String?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  userId    Int       @map("user_id")
  serviceId Int       @map("service_id")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  service   Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@map("bookings")
}

model Calendar {
  id           String           @id @default(uuid())
  userId       Int              @map("user_id")
  provider     CalendarProvider
  email        String
  accessToken  String?
  refreshToken String?
  tokenExpiry  DateTime?        @map("token_expiry")
  timezone     String?
  connectedAt  DateTime         @map("connected_at")
  createdAt    DateTime         @default(now()) @map("created_at")
  updatedAt    DateTime         @updatedAt @map("updated_at")
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("calendars")
} 